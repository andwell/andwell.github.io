<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guo&#39;s Page</title>
  <subtitle>iOS随笔杂文</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iosguo.com/"/>
  <updated>2017-04-21T02:33:15.000Z</updated>
  <id>http://iosguo.com/</id>
  
  <author>
    <name>Fangqing Guo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小说iOS视图层（UIView/CALayer）绘制</title>
    <link href="http://iosguo.com/2017/02/15/UIView&amp;CALayer/"/>
    <id>http://iosguo.com/2017/02/15/UIView&amp;CALayer/</id>
    <published>2017-02-16T02:08:00.000Z</published>
    <updated>2017-04-21T02:33:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名从业多年的iOS开发者，我也曾有过许多关于使用<strong>UIView</strong>的疑惑，同样好奇这些琳琅满目的视图是如何绘制到iPhone屏幕上的，多年的使用经验也未必对其烂如指掌，只能说稍有了解。如果你也有疑惑，那就与我一同往下探究一番。<br><a id="more"></a></p>
<h4 id="视图层结构"><a href="#视图层结构" class="headerlink" title="视图层结构"></a>视图层结构</h4><p>当我们拿到一个关于视图的需求时，最初要想的便是使用什么样的视图控件来实现？所以这就考验我们对于iOS系统支持的原生控件的熟练程度，比如：当需要一个图片展示容器，我们首先想到使用<strong>UIImageView</strong>；当需要一个文本行展示，我们会想到<strong>UILabel</strong>，这都是出于对<strong>UIKit</strong>组件框架的基本了解；那么当遇到需要图片和文本混排出现的需求时，我们应该使用怎样的视图控件呢？初级程序员会想到<strong>UILabel+UIImageView+UILabel</strong>来解决，然而稍有经验的程序员会选择自定义封装一个控件，孰优孰劣呢？</p>
<p>我们知道iOS中视图相关的控件都是继承自<strong>UIView</strong>的（注意这里我指的都是控件），比如 UIButton/UILabel/UIImageView/UITableViewCell/UIScrollView等，然而<strong>UIView</strong>本身是不具备任何直接渲染显示能力的。我们也可以直接使用<strong>CALayer</strong>来封装展示出你想要的各种视图样式，那么他们都是什么样的关系结构呢？我们就从继承或所属关系讲起吧。</p>
<p><img src="/images/viewpic1.png" alt=""></p>
<p>从图上我们能看出任何继承自<strong>UIView</strong>的控件都有一个layer，这是在<strong>UIView</strong>创建的时候系统会默认创建一个<strong>CALayer</strong>的属性实例。而这个<strong>CALayer</strong>所属<strong>CoreAnimation</strong>框架（由于类文件过少，目前被纳入<strong>QuartzCore</strong>视图引擎框架中），这是同时为iOS和Mac OS共用的类。</p>
<h4 id="视图层到屏幕显示"><a href="#视图层到屏幕显示" class="headerlink" title="视图层到屏幕显示"></a>视图层到屏幕显示</h4><p>看了上图的结构，也许你依然疑惑：视图层到底是怎样渲染并显示到屏幕上的？那我们就继续往下探究，同样先给出一个直观点的示意流程图吧。（接下来只讲大致流程，鉴于篇幅过长，暂不详说）</p>
<p><img src="/images/viewpic2.png" alt=""></p>
<p>按图示流程，① <strong>Core Animation</strong> (简称CA)会处理一个layout and display的Transaction（后文讲这是哪里来的消息事件），通过layer(CALayer)传递到其delegate(UIView)，②<strong> Core Graphics</strong>(简称CG)是一个轻量级绘画引擎在这其中提供上下文（Contenxt）及一些常用绘画工作，因此直接使用CA和CG搭配也能达到绘制的目的（上图中的①②），<strong>UIKit</strong> 只是iOS提供了更丰富的用户交互事件来封装控件而已（别忘了 <strong>UIView</strong>继承自 <strong>UIResponder</strong>），③ 将绘制后的上下文返回到<strong>CALayer</strong>并由CA转换成位图纹理，④ 通过 <strong>OpenGL ES</strong> 将位图内容交由GPU作变换、合成、渲染等处理，渲染完成后放入帧缓冲区，⑤ 视频控制器按照 V-Sync 信号读取帧缓冲区的数据，最后传递给显示器显示出来。</p>
<h4 id="不停歇地显示"><a href="#不停歇地显示" class="headerlink" title="不停歇地显示"></a>不停歇地显示</h4><p>以上从视图到显示的原理想必大家都理解了，但或许依然存在这样一个疑问：为什么屏幕会不停歇地流畅显示呢？这就要从 <strong>Runloop</strong> 开始说起了，如果对 <strong>Runloop</strong> 不甚了解的同学赶紧去恶补之，这里不详赘，简而言之，就像操作系统为什么会不停的工作着（即使你开机后什么也不做），正是有一个循环的程序在周而复始的运行，<strong>Runloop</strong> 即是如此。当用户触摸屏幕时 <strong>Runloop</strong> 会高优先级处理这些交互事件源（俗称source0之一），此时会触发CA在 <strong>Runloop</strong> 中的监听回调<code>CA::Transaction::observer_callback</code>，再逐步处理便有了上面说的①消息源头（当然触发①不仅这一点）。</p>
<p>当用户不操作且无其他定时代码操作时，视频控制器会依照60HZ频率发出的V-Sync来重复读取帧缓冲区中数据并显示到屏幕（此时仅是因为缓冲区数据未被更新而已）。</p>
<h4 id="代码执行时机"><a href="#代码执行时机" class="headerlink" title="代码执行时机"></a>代码执行时机</h4><p>对于程序员来讲，几行代码胜千言，我们就秉承着“无代码不哔哔”的原则来一起看看代码吧。先来说说曾经我也十分疑惑的以下几个方法的执行时机（此处不分先后，仅列举）。</p>
<p><strong>UIView</strong> 方法(部分可重写但不可主动调用)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- setNeedsLayout</div><div class="line">- layoutIfNeeded</div><div class="line">- layoutSubviews</div><div class="line">- setNeedsDisplay</div><div class="line">- drawRect:</div></pre></td></tr></table></figure></p>
<p><strong>CALayer</strong> 方法(部分可重写但不可主动调用)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- setNeedsLayout</div><div class="line">- layoutIfNeeded</div><div class="line">- layoutSublayers</div><div class="line"></div><div class="line">- drawInContext:</div><div class="line">- setNeedsDisplay</div><div class="line">- displayIfNeeded</div><div class="line">- display</div></pre></td></tr></table></figure></p>
<p><strong>CALayerDelegate</strong> 协议方法(可在<strong>UIView</strong>中实现)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- layoutSublayersOfLayer:</div><div class="line">- displayLayer:</div><div class="line">- drawLayer:inContext:</div><div class="line">- layerWillDraw:</div></pre></td></tr></table></figure></p>
<p>从以上分类列举我们似乎通过方法命名也能看出大致的执行顺序，但类之间的执行顺序又是如何的呢，我们通过两个方面来验证</p>
<ul>
<li>看官方API说明文档</li>
<li>跑demo亲测验证（戳这里<a href="https://github.com/andwell/TestViewLayer" target="_blank" rel="external">github</a> 看真相）。</li>
</ul>
<p>相信很多人都用过<code>drawRect:</code>这个方法来实现自定义绘制视图，我们看下官方文档的时机解释（前面一大部分略去了，<a href="https://developer.apple.com/reference/uikit/uiview/1622529-drawrect?language=objc" target="_blank" rel="external">戳查阅</a>）：</p>
<blockquote>
<p>This method is called when a view is first displayed or when an event occurs that invalidates a visible part of the view. You should never call this method directly yourself. To invalidate part of your view, and thus cause that portion to be redrawn, call the setNeedsDisplay or setNeedsDisplayInRect: method instead.</p>
</blockquote>
<p>这里我们大致清楚这个调用时机了：1. 视图第一次将被显示的时候 2. 视图可见部分被用户交互行为触发重绘的时候，当然官方还给出了提示（直译）</p>
<blockquote>
<p>你不能直接调用该方法，如果需要刷新重绘可以调用setNeedsDisplay方法</p>
</blockquote>
<p>我们demo来亲测验证下。<br>代码环境：Xcode8.2下新建简单project、新建<strong>UIView</strong>的子类<strong>CustomView</strong>（仅重写<code>drawRect:</code>方法并放置debug断点），xib拖拽view视图到默认main.storyboard显示，同时设置class为新建的<strong>CustomView</strong>。</p>
<p>测试设备：iPhone6s plus真机（以下试验皆为此设备）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">thread #1: tid = 0x8cbdf, 0x0000000100029cbc TestViewDemo`-[CustomView drawRect:](self=0x0000000109e0e5b0, _cmd=&quot;drawRect:&quot;, rect=(origin = (x = 0, y = 0), size = (width = 240, height = 128))) + 36 at CustomView.m:31, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.1</div><div class="line">frame #0: 0x0000000100029cbc TestViewDemo`-[CustomView drawRect:](self=0x0000000109e0e5b0, _cmd=&quot;drawRect:&quot;, rect=(origin = (x = 0, y = 0), size = (width = 240, height = 128))) + 36 at CustomView.m:31</div><div class="line">frame #1: 0x0000000194ed3a60 UIKit`-[UIView(CALayerDelegate) drawLayer:inContext:] + 408</div><div class="line">frame #2: 0x00000001922f959c QuartzCore`-[CALayer drawInContext:] + 260</div><div class="line">frame #3: 0x00000001921fa848 QuartzCore`CABackingStoreUpdate_ + 2848</div><div class="line">frame #4: 0x00000001922f916c QuartzCore`___ZN2CA5Layer8display_Ev_block_invoke + 52</div><div class="line">frame #5: 0x00000001922f8e0c QuartzCore`CA::Layer::display_() + 1524</div><div class="line">frame #6: 0x00000001922ee314 QuartzCore`CA::Layer::display_if_needed(CA::Transaction*) + 228</div><div class="line">frame #7: 0x00000001922ee398 QuartzCore`CA::Layer::layout_and_display_if_needed(CA::Transaction*) + 44</div><div class="line">frame #8: 0x000000019226b3e0 QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 252</div><div class="line">frame #9: 0x0000000192292a68 QuartzCore`CA::Transaction::commit() + 512</div><div class="line">frame #10: 0x0000000192293488 QuartzCore`CA::Transaction::observer_callback(__CFRunLoopObserver*, unsigned long, void*) + 120</div><div class="line">frame #11: 0x000000018ef460c0 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 32</div><div class="line">frame #12: 0x000000018ef43cf0 CoreFoundation`__CFRunLoopDoObservers + 372</div><div class="line">frame #13: 0x000000018ee722d8 CoreFoundation`CFRunLoopRunSpecific + 476</div><div class="line">frame #14: 0x0000000194eb97b0 UIKit`-[UIApplication _run] + 608</div><div class="line">frame #15: 0x0000000194eb4534 UIKit`UIApplicationMain + 208</div><div class="line">frame #16: 0x000000010002a7e8 TestViewDemo`main(argc=1, argv=0x000000016fddbac0) + 124 at main.m:14</div><div class="line">frame #17: 0x000000018de555b8 libdyld.dylib`start + 4</div></pre></td></tr></table></figure>
<p>打印日志很清晰明了，如果你觉的略微混乱，我翻译成简单调用函数栈就更加清晰了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">UIKit:UIApplicationMain()</div><div class="line">UIKit:[UIApplication _run]</div><div class="line">CoreFoundation:__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__</div><div class="line">    QuartzCore:CA::Transaction::observer_callback:</div><div class="line">        CA::Transaction::commit();</div><div class="line">            CA::Context::commit_transaction();</div><div class="line">        CA::Layer::layout_and_display_if_needed();</div><div class="line">            [CALayer display];</div><div class="line">                [CALayer drawInContext:];</div><div class="line">            [UIView drawLayer:inContext:];</div><div class="line">                [UIView drawRect];</div></pre></td></tr></table></figure></p>
<p>虽然这里还有一些细节调用没有打印出来，但至少说明以上部分理论还是得到印证了：1. 系统会自动创建view的layer 2. 视图绘制的触发源来源于<strong>Runloop</strong>的监听事件。至此我们也基本验证了官方文档的说明时机（点击屏幕模拟交互时触发的重绘逻辑同样可以验证），同时我们还可以验证一个有意思的事情：重写<code>drawRect:</code>方法会带来更大的内存开销！！在该真机设备上不重写<code>drawRect:</code>内存占用5.3M而简单重写（并不实现任何重绘操作）后占用内存为6.7M，why？通过了解官方文档不难理解，原因在于重写<code>drawRect:</code>后CA会创建一个后备存储（back store）供CG恢复数据并上传到GPU使用。所以赶紧看看你们的项目工程中是否存在重写<code>drawRect:</code>后而无任何实现的代码，这里会有没必要的内存占用开销哦。 那么有人会问了：“不重写，系统就没有实现这个方法了？” 莫急，接下来我们验证什么情况下<code>drawRect:</code>方法不会被调用。</p>
<p>从上面的方法调用栈可以看出，最简单的在view上实现<strong>CALayerDelegate</strong>的协议方法<code>drawLayer:inContext:</code>这样便能直接导致重写<code>drawRect:</code>无效（不被调用），这个思路告诉我们<code>drawRect:</code>不是万能的，重写或不重写都是要看剧情需要的。你可知道<strong>UIImageView</strong>重写<code>drawRect:</code>是无效的？虽然<strong>UIImageView</strong>也同样拥有一个<strong>CALayer</strong>，但不会申请一个后备存储来保存内容，而是使用<strong>CGImageRef</strong>作为内容，并且渲染服务将会把图片数据绘制到帧的缓冲区最终显示到屏幕。</p>
<p>不卖关子了，咱们继续往下讲上面列举出的所有方法执行时机。就从layout说起，我们看到<strong>UIView</strong>和<strong>CALayer</strong>中都有几个类似的方法<code>setNeedsLayout</code>、<code>layoutIfNeede</code>d、<code>layoutSubviews/layoutSublayers</code>，这些全看官方文档就一目了然了，<code>setNeedsLayout</code>方法只是给view/layer记标识以便下一个drawing cycle（别忘了runLoop）消息layout_and_display_if_needed到来时能顺利往下执行与否，因此这个方法是可供给开发者主动调用并起到标识的作用，但是并不能直接触发layout，然而可以直接调用<code>layoutIfNeeded</code>方法在必要时强制执行layout subviews/sublayers。同理，<code>setNeedsDisplay</code>和<code>displayIfNeeded</code>（仅<strong>CALayer</strong>中有此方法）原理相似，唯独不同的是先计算视图布局（layout）系列方法后再显示（display）系列方法。哔哔这么多，还是没讲具体执行时机与顺序？</p>
<p>OK，接下来开启进阶模式，咱们来模拟这些方法在系统中的调用过程，直接看demo中的代码，我再新建一个<strong>CustomLayer</strong>，在<strong>CustomView</strong>添加一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (Class)layerClass &#123;</div><div class="line">    return [CustomLayer class];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也就是说，不再需要系统在<strong>UIView</strong>创建的时候帮我创建默认<strong>CALayer</strong>来当其layer属性，在<strong>CustomView</strong>实例创建时，会根据这个方法创建相应的<strong>CustomLayer</strong>来作为其 .layer。把demo跑起来debug，我们大致发现这样的执行顺序（以下伪代码仅为通过debug模拟后UIView&amp;CALayer执行顺序）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">CoreFoundation:__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__</div><div class="line">    QuartzCore:CA::Transaction::observer_callback:</div><div class="line">        CA::Transaction::commit();</div><div class="line">            CA::Context::commit_transaction();</div><div class="line">        CA::Layer::layout_and_display_if_needed();</div><div class="line">            CA::Layer::layout_if_needed(); // 此处便是判断是否有setNeedsLayout标识        </div><div class="line">                [CALayer layoutSublayers]; // ①</div><div class="line">                   [UIView layoutSublayersOfLayer:]; // ② CALayerDelegate协议方法</div><div class="line">                       [UIView layoutSubviews]; // ③</div><div class="line">             CA::Layer::display_if_needed();// 此处便是判断是否有setNeedsDisplay标识</div><div class="line">                [CALayer display]; // ④</div><div class="line">                    [CALayer layerWillDraw:]; // ⑤ CALayerDelegate协议方法</div><div class="line">                        [CALayer drawInContext:];// ⑥</div><div class="line">                    [UIView drawLayer:inContext:]; // ⑦ CALayerDelegate协议方法   </div><div class="line">                        [UIView drawRect];// ⑧</div></pre></td></tr></table></figure></p>
<p>现在执行时机与顺序应该算比较清楚了，但值得一提的是当你重写以上系统方法后<code>layoutSubviews</code>和<code>drawRect</code>不是必执行的方法哦（以上仅为模拟原生执行顺序），弄清楚执行顺序后自定义封装你想要的视图或组件便可以信手捏来。</p>
<h4 id="主线程操作UI"><a href="#主线程操作UI" class="headerlink" title="主线程操作UI"></a>主线程操作UI</h4><p>iOS开发者人人皆知：UI操作只能放在主线程。why ？<br>我们知道通过看<strong>Runloop</strong>的<a href="https://opensource.apple.com/source/CF/CF-855.17/CFRunLoop.c" target="_blank" rel="external">源代码</a>，知道<code>UIApplicationMain</code>主函数首次获取并创建<strong>Runloop</strong>时便是在主线程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CFRunLoopRef mainLoop = _CFRunLoopCreate();</div><div class="line">CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);</div></pre></td></tr></table></figure></p>
<p>那么上面讲的CA发出的layout和display消息默认就是在主线程操作的，这只说明操作源于主线程，并不代表开发者不能主动让<strong>UIView</strong>的实现代码在子线程操作，比如可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(0,0), ^&#123;</div><div class="line">    anotherView.frame = CGRectMake(100,100,10,10);</div><div class="line">    [view addSubview:anotherView];</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这样写代码有经验的程序员自然一眼就发现不对，但是实际中的项目代码往往没这么简单，比如 网络回调方法有时候就是在子线程中操作的（隐性的代码不易被发现），一不小心恰好在此时调用<strong>UIView</strong>相关的操作这种情况想必很多人都中过招，此时编译器是不会直接提示的。那么为什么不行呢？又该如何检查及避免呢？</p>
<p>依然还是从代码出发找找原因，可以直接查看<strong>UIView</strong>相关的属性，基本都类似这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@property(nonatomic) CGRect frame;</div><div class="line">@property(nonatomic) CGRect bounds;</div><div class="line">@property(nonatomic) CGPoint center;</div><div class="line">@property(nonatomic,readonly,strong) CALayer *layer;</div></pre></td></tr></table></figure></p>
<p>其属性修饰符几乎都是nonatomic的，同样我们看过源码的话知道，非原子与原子修饰主要区别在于该属性是否有自旋锁的读取保障，也就是说nonatomic修饰的属性在读取时是非线程安全的。仅仅就这么一个简单的理由就能说服“UI操作只能放在主线程”吗？连我自己都觉得有点too young too simple ，来看看Apple高端大气的<a href="https://developer.apple.com/reference/uikit#//apple_ref/doc/uid/TP40006955-CH1-SW1" target="_blank" rel="external">解释</a>：</p>
<blockquote>
<p>For the most part, use UIKit classes only from your app’s main thread. This is particularly true for classes derived from UIResponder or that involve manipulating your app’s user interface in any way.</p>
</blockquote>
<p>简言翻译下：“对于<strong>UIKit</strong>而言，大部分类是只能在主线程操作的，主要是由于这些类大多是继承自<strong>UIResponder</strong>或是涉及各种用户界面交互事件的操作”。你看，苹果爸爸说话就是言简意赅。说白了，苹果主要是为了用户体验及界面流畅度来考虑的，撇开繁杂的界面在子线程操作需要更多的维护开销不说，设想下如果视图支持了子线程，用户在滑动着屏幕时突然N多个子视图异步回调刷新了，同时响应用户及屏幕会不会大有问题。原子操作的修改是小（何况这本就是故意为之），要保证UI界面的线程安全确是一笔不小的工作。</p>
<p>既然苹果也说了“大部分类”，那就说明部分类及方法是线程安全的（可以子线程操作），比如 iOS4以后 <strong>UIColor</strong>、<strong>UIFont</strong> 等都是线程安全的，还有我们常遇到的 <strong>UIImage</strong> 设置image的部分方法也是线程安全的哦（类似<code>imageWithContentOfFile:</code>是线程安全的，而<code>imageNamed:</code>在iOS9之前都是非线程安全的），所以在使用之前记得多查阅API文档。</p>
<p>那么，怎么避免呢？我写了个<strong>UIView</strong>的category，数行代码写成的小工具可以放到项目工程中，运行时自动检测并避免这类错误（戳这里看<a href="https://github.com/andwell/FKGuardUIView" target="_blank" rel="external">小工具源码</a>）。类似常见的如下错误同样可以检测并避免：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Can&apos;t add self as subview</div></pre></td></tr></table></figure></p>
<h4 id="异步绘制"><a href="#异步绘制" class="headerlink" title="异步绘制"></a>异步绘制</h4><p>嗯，不得不说这个话题很火爆。类似国外 <strong>Facebook</strong> 的开源库 <strong>AsyncDisplayKit</strong> 和国内开源库 <strong>YYKit</strong> 主要都是解决这个事儿的，既然上个话题说“UI操作只能放在主线程”，那又何谈异步绘制呢？很简单，我们已经弄清楚 <strong>UIKit</strong> 和 <strong>CALayer</strong> 大部分只能在主线程操作，但不代表CG的操作不能在子线程执行，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)</div><div class="line">UIGraphicsGetCurrentContext()</div><div class="line">UIGraphicsGetImageFromCurrentImageContext()</div><div class="line">UIGraphicsEndImageContext()</div></pre></td></tr></table></figure></p>
<p>这些方法申明虽然在<strong>UIKit</strong>框架中，实则是C写的承接CG与UI的过渡函数，属于对CG绘图的封装，都是可以在子线程操作的。我的Demo中便是一个异步绘制红色五角星的代码，接下来上伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CA::Layer::display_if_needed();</div><div class="line">  [CALayer display]; // CALayer只能主线程操作</div><div class="line">  dispatch_async(dispatch_get_global_queue(0,0), ^&#123;</div><div class="line">       // CG draw something</div><div class="line">       image = UIGraphicsGetImageFromCurrentImageContext();</div><div class="line">       // back to main thread when finished</div><div class="line">      dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">          [CALayer setContents:image];</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>看完代码想必大家认为这异步绘制也并非难事了。</p>
<h3 id="后文"><a href="#后文" class="headerlink" title="后文"></a>后文</h3><p>文述简劣，如有表述不当之处，还望大家不吝指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名从业多年的iOS开发者，我也曾有过许多关于使用&lt;strong&gt;UIView&lt;/strong&gt;的疑惑，同样好奇这些琳琅满目的视图是如何绘制到iPhone屏幕上的，多年的使用经验也未必对其烂如指掌，只能说稍有了解。如果你也有疑惑，那就与我一同往下探究一番。&lt;br&gt;
    
    </summary>
    
      <category term="视图层" scheme="http://iosguo.com/categories/%E8%A7%86%E5%9B%BE%E5%B1%82/"/>
    
    
      <category term="视图" scheme="http://iosguo.com/tags/%E8%A7%86%E5%9B%BE/"/>
    
      <category term="UIView" scheme="http://iosguo.com/tags/UIView/"/>
    
      <category term="CALayer" scheme="http://iosguo.com/tags/CALayer/"/>
    
  </entry>
  
  <entry>
    <title>移动客户端iOS网络库设计闲谈</title>
    <link href="http://iosguo.com/2016/08/13/Network/"/>
    <id>http://iosguo.com/2016/08/13/Network/</id>
    <published>2016-08-14T06:18:26.000Z</published>
    <updated>2017-04-21T02:22:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于移动客户端网络层设计相关的文章可能已经数不胜数了，所以原本并没打算单独开篇来讲这块，鉴于近期有同事说要我写个网络库的介绍文档，我就干脆写篇博文吧，从网络层的设计之初思考的问题到后期更新一并娓娓道来，权当设计文档讲解罢。<br><a id="more"></a></p>
<h2 id="移动端网络层设计考虑的问题"><a href="#移动端网络层设计考虑的问题" class="headerlink" title="移动端网络层设计考虑的问题"></a>移动端网络层设计考虑的问题</h2><p>一个良好的封装往往耗时最多是在前期的思考上，同样在网络库设计之初，我们把大部分时间花在考虑以下几个问题上。</p>
<ul>
<li>使用者如何去调用API</li>
<li>以什么方式回调给业务层调用者</li>
<li>将什么样的数据交付给调用者</li>
<li>如何优化网络层</li>
</ul>
<p>然而判断一个代码封装乃至架构的好坏，不仅仅是使用者口中的使用方便与否，更为重要的是能否满足你现有的业务需求，并在不断变化的需求中依然适用，基于以上考虑并提升体验，在设计网络库时我们又额外做到了哪些？</p>
<ul>
<li>特殊应用场景实现多个网络请求的依赖与优先级(并发顺序管理)</li>
<li>根据当前设备网络状况(2G/3G/4G/wifi)实时切换请求超时</li>
<li>根据当前设备网络状况实时改变网络请求并发数量</li>
<li>快速适配ipv6及https网络环境</li>
<li>保持同步对接<code>NSURLSession</code></li>
</ul>
<h3 id="使用者如何去调用API"><a href="#使用者如何去调用API" class="headerlink" title="使用者如何去调用API"></a>使用者如何去调用API</h3><p>无论什么样的封装，都需要考虑开放什么样的API接口供人调用才最合适，相信大部分RD都比较反感某个类一大堆的API，尤其是那些十分相似的API(可能仅仅只差个别形参而已)，我们一直秉承简单的原则，API简单实用即可(第三方开源库除外)。同时我们必须要面对的另外一个问题是：业务层RD如何去调用这个基础库的API？常用的两种方式：</p>
<ul>
<li>集中式调用API</li>
<li>分散构造式调用API</li>
</ul>
<p>类似<code>SDWebImage</code>无需单独构建并去引用实例来使用就可以说是一种集中式调用API,构造与引用都是调用者本体，然而类似<code>AFNetworking</code>在其3.0之前版本我们常用的<code>AFNetworkOpreation</code>每次使用时都是单独构造初始化且作为属性引用的方式就是分散式调用API。当然两种方式各有优劣，找准适合自己的就好。从我们APP之前RD使用AFN的角度来讲下：</p>
<ol>
<li><strong>劣势：</strong> 使用<code>AFNetworkOpreation</code>作为属性来发起每一个网络请求，当某个模块需要同时发起多个请求时便需要维护多个实例变量，尤其在MRC的年代，模块析构时-dealloc方法中忘记置空请求的实例，经常发生垂悬指针(野指针)导致crash的情况，从而增加了维护其生命周期的工作。</li>
<li><strong>优势：</strong> 分散式的调用由于其生命周期自行管理与API调用，debug就显得更为方便。</li>
</ol>
<p>目前我们选择集中式调用的方式，无论何时何地需要发起网络请求时只需获取网络库的单例对象直接调用API即可，这样就简化了业务调用者维护其生命周期的成本，结合下文我会讲其他的优势。</p>
<h3 id="以什么方式回调给业务层调用者"><a href="#以什么方式回调给业务层调用者" class="headerlink" title="以什么方式回调给业务层调用者"></a>以什么方式回调给业务层调用者</h3><p>当我在参与公司第一次职级评审时，曾就遇到过某总监问过我这样一个问题：你认为<code>delegate</code>与<code>block</code>最大的区别在哪里？两者的应用场景是否能互换来实现？我就以网络层的回调方式来回答并讲解。目前iOS常用的回调方式有：</p>
<ul>
<li>消息通知<code>NSNotification</code>方式</li>
<li>委托代理<code>delegate</code>方式</li>
<li>函数块<code>block</code>方式</li>
</ul>
<p>接下来我一一说下这几种方式的优劣与我理解的适用场景吧</p>
<ol>
<li><code>NSNotification</code>这是解耦神器，可以简单实现跨层调用，调用不留痕、耦合极低，然而由于其为广播式的扩散，控制不好便容易带来跨层bug，尤其是在通知重名的情况下。所以其更为适用：局部跨层调用。</li>
<li><code>delegate</code>其实与直接调用的方式差不多，只不过是被委托方引用了委托者指针从而实现了随时调用委托方的方法(协议)。这种方式的劣势在于，比如同一模块发起多个请求，相应的完成回调都会经过同一个协议方法，这样你想区分是谁的回调就稍微麻烦了。所以其更为适用：单一调用的回调(每个模块就一个调用者或者无需区分调用者)。</li>
<li><code>block</code>这是一个在iOS5以后被广泛使用的回调方式，从Apple系统类库中便能找到不少印证，同时也是最好的学习使用的地方。先说说优势，调用之处便是回调之处，直观易维护；再说其劣势，函数指针的引用会延长代码块内对象的生命周期，而且在某些情况不利于debug(看xcode左侧的调用栈你也许会比较迷茫)。所以其更为适用：熟悉block内存管理的前提下，不出现循环block调用时的应用场景。</li>
</ol>
<p>目前我们选择的是<code>block</code>方式，上面我也讲到了我们使用<strong>集中式调用</strong>的方式，调用之处便是回调之处就显得更方便与重要了。想一想如果这时再使用<code>delegate</code>的回调方式，是不是细思极恐？</p>
<h3 id="将什么样的数据交付给调用者"><a href="#将什么样的数据交付给调用者" class="headerlink" title="将什么样的数据交付给调用者"></a>将什么样的数据交付给调用者</h3><p>这可能是个比较有争议的话题，回想当年我刚接触iOS的时候，在那个处处都讲MVC的年代，第一任公司APP大部分模块都是Model化的，任何有view的地方几乎都能见到其对应的model，这样的好处是层次分明，便于维护，但处处都新建model也显得略微麻烦(即使我们是自动化建model类)。这就引出了，我们在封装网络库时能选择的两种数据交付方式：</p>
<ul>
<li>服务端数据经过序列化后再转化为特定的数据结构Model交付业务层</li>
<li>服务端数据经过序列化后的<code>NSData</code>或者字典、数组等系统自带数据结构交付业务层</li>
</ul>
<p>同样，我的看法是什么样的方式适合你当前的业务层架构就选什么方式。model化固然是好，但同样会增加转化组装的时间成本，有时候直接使用字典的k-v数据结构已很方便了就没必要交付model化后的数据，model适用的场景：当view层频繁会依据数据的变更来更新视图，比如 某个列表中有单选框，勾选个别行的操作，直接改变model化后数据比改变<code>NSDictionary</code>的个别数据就容易的多。所以说坚持去model化也未必是好，比如 我们有个重要的模块，要求数据来了以后上层直接过滤掉错误数据，这就利用网络库model化自动填充数据来容错就比在业务层再挨个处理就显得机智许多。总结：结合业务场景混合使用更好。</p>
<h3 id="如何优化网络层"><a href="#如何优化网络层" class="headerlink" title="如何优化网络层"></a>如何优化网络层</h3><p>移动客户端对于网络层可以优化的地方，目前应该是比较成熟固定了，也许谷歌、度娘一下就是一大堆，我就列举几方面不再累述了：</p>
<ul>
<li>建立链路复用(spdy等)</li>
<li>DNS解析耗时使用IP直连或者cdn选择就近服务器节点下发数据</li>
<li>数据传输阶段GZIP或者数据复用</li>
<li>客户端缓存策略</li>
</ul>
<h3 id="关于我们网络库的设计"><a href="#关于我们网络库的设计" class="headerlink" title="关于我们网络库的设计"></a>关于我们网络库的设计</h3><p>如何做到网络请求的依赖与优先级管理，以及为了提升用户体验我们做到了根据网络环境变化来实时切换并发数与请求超时的策略，可以直观的看设计示意图：</p>
<p><img src="/images/network121.png" alt=""></p>
<p>虽然图中并没直接指出具体实现，但不难想到具体逻辑。</p>
<ol>
<li>关于请求超时的计算，粒度并不如Facebook他们做的那么细，利用RTT(往返时延)每次请求由服务端来实时返回，效果会更佳。</li>
<li>同样，由于<strong>集中式调用</strong>的优势，APP当前经过网络库的所有网络请求都会在线程队列当中，从而很容易判断出当前APP的并发状态，是否繁忙、空闲(某些业务场景像非实时必要的日志上传就可以选择在空闲时进行)。</li>
</ol>
<h4 id="关于适配ipv6"><a href="#关于适配ipv6" class="headerlink" title="关于适配ipv6"></a>关于适配ipv6</h4><p>同样我们可以从上图能看到网络监控的模块，基于苹果给出的开源类<code>reachability</code>再开发，并且实现网络状况(2G/3G/4G/wifi)变化的监控。严格把控APP内IP直连的请求，按照Apple文档修改即可。</p>
<h4 id="关于同步对接NSURLSession"><a href="#关于同步对接NSURLSession" class="headerlink" title="关于同步对接NSURLSession"></a>关于同步对接<code>NSURLSession</code></h4><p>AFN3.0已经作出了相应更改支持<code>NSURLSession</code>，共享Session实现TCP复用从而减少握手时间，同时也简化了代码对认证的操作，这就为迎接明年的HTTPS定了基调，但AFN去掉了<code>NSOperation</code>的使用方式，就难以实现线程优先级、依赖等问题，所以我们摒弃直接使用AFN，保留了其请求前配置相关和数据返回后序列化相关的思路，取其精华去其糟粕的开发出了新的底层网络库，如上示意图。细节开发与设计，请移步阅读<a href="http://geek.csdn.net/news/detail/135822" target="_blank" rel="external">极客头条</a>–原文为笔者发布于《程序员》杂志文章「58同城iOS客户端网络框架的演进之路」。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于移动客户端网络层设计相关的文章可能已经数不胜数了，所以原本并没打算单独开篇来讲这块，鉴于近期有同事说要我写个网络库的介绍文档，我就干脆写篇博文吧，从网络层的设计之初思考的问题到后期更新一并娓娓道来，权当设计文档讲解罢。&lt;br&gt;
    
    </summary>
    
      <category term="网络层设计" scheme="http://iosguo.com/categories/%E7%BD%91%E7%BB%9C%E5%B1%82%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="网络" scheme="http://iosguo.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="iOS" scheme="http://iosguo.com/tags/iOS/"/>
    
  </entry>
  
</feed>
